div.offcanvas.offcanvas-bottom#exportDialog(x-ref="exportDialog", style="--bs-offcanvas-height:initial;;min-height:50vh;max-height:100vh")
    div.offcanvas-header
        h5.offcanvas-title Export Chapters
        button.btn-close(data-bs-dismiss="offcanvas")
    div.offcanvas-body.pt-0.d-flex.flex-column
        div.container-xl.flex-grow-1.d-flex.flex-column
            div.row.flex-grow-1
                div.col-12.d-flex.flex-column.flex-grow-1
                    ul.nav.nav-tabs.mb-2(style="--bs-nav-link-padding-x:0.5rem")
                        li.nav-item(x-show="selectedFormats.includes('chaptersjson') || selectedFormats.length === 0")
                            a.nav-link(:class="{active : exportSettings.type === 'chaptersjson'}", href="#", @click.stop.prevent="updateExportContent('chaptersjson')")
                                i.bi.bi-filetype-json
                                |
                                | chapters.json
                        li.nav-item(x-show="selectedFormats.includes('webvtt')")
                            a.nav-link(:class="{active : exportSettings.type === 'webvtt'}", href="#", @click.stop.prevent="updateExportContent('webvtt')")
                                i.bi.bi-filetype-txt
                                |
                                | WebVTT
                        li.nav-item(x-show="selectedFormats.includes('youtube')")
                            a.nav-link(:class="{active : exportSettings.type === 'youtube'}", href="#", @click.stop.prevent="updateExportContent('youtube')")
                                i.bi.bi-youtube
                                |
                                | Youtube
                        li.nav-item(x-show="selectedFormats.includes('matroskaxml')")
                            a.nav-link(:class="{active : exportSettings.type === 'matroskaxml'}", href="#", @click.stop.prevent="updateExportContent('matroskaxml')")
                                i.bi.bi-filetype-xml
                                |
                                | Matroska
                        li.nav-item(x-show="selectedFormats.includes('mkvmergexml') || selectedFormats.includes('mkvmersimple') || selectedFormats.includes('vorbiscomment')")
                            a.nav-link(:class="{active : /^(mkvmerge|vorbis)/.test(exportSettings.type)}", href="#", @click.stop.prevent="updateExportContent('mkvmergexml')")
                                i.bi.bi-filetype-xml
                                |
                                | MKVMerge/Nero/Vorbis
                        li.nav-item(x-show="selectedFormats.includes('ffmetadata')")
                            a.nav-link(:class="{active : exportSettings.type === 'ffmetadata'}", href="#", @click.stop.prevent="updateExportContent('ffmetadata')")
                                i.bi.bi-file-binary
                                |
                                | FFMetadata
                        li.nav-item(x-show="selectedFormats.includes('pyscenedetect')")
                            a.nav-link(:class="{active : exportSettings.type === 'pyscenedetect'}", href="#", @click.stop.prevent="updateExportContent('pyscenedetect')")
                                i.bi.bi-filetype-py
                                |
                                | PySceneDetect
                        li.nav-item(x-show="selectedFormats.includes('applechapters')")
                            a.nav-link(:class="{active : exportSettings.type === 'applechapters'}", href="#", @click.stop.prevent="updateExportContent('applechapters')")
                                i.bi.bi-filetype-xml
                                |
                                | Apple Chapters
                        li.nav-item(x-show="selectedFormats.includes('psc') || selectedFormats.includes('podlovejson')")
                            a.nav-link(:class="{active : /^(psc|podlovejson)/.test(exportSettings.type)}", href="#", @click.stop.prevent="updateExportContent('psc')")
                                i.bi.bi-filetype-xml
                                |
                                | Podlove
                        li.nav-item(x-show="selectedFormats.includes('mp4chaps')")
                            a.nav-link(:class="{active : exportSettings.type === 'mp4chaps'}", href="#", @click.stop.prevent="updateExportContent('mp4chaps')")
                                i.bi.bi-filetype-txt
                                |
                                | MP4Chaps
                        li.nav-item(x-show="selectedFormats.includes('shutteredl')")
                            a.nav-link(:class="{active : exportSettings.type === 'shutteredl'}", href="#", @click.stop.prevent="updateExportContent('shutteredl')")
                                i.bi.bi-filetype-txt
                                |
                                | EDL
                        li.nav-item(x-show="selectedFormats.includes('applehls')")
                            a.nav-link(:class="{active : exportSettings.type === 'applehls'}", href="#", @click.stop.prevent="updateExportContent('applehls')")
                                i.bi.bi-filetype-json
                                |
                                | Apple HLS chapters
                        li.nav-item(x-show="selectedFormats.includes('scenecut')")
                            a.nav-link(:class="{active : exportSettings.type === 'scenecut'}", href="#", @click.stop.prevent="updateExportContent('scenecut')")
                                i.bi.bi-filetype-json
                                |
                                | Scenecut
                        li.nav-item(x-show="selectedFormats.includes('podigee')")
                            a.nav-link(:class="{active : exportSettings.type === 'podigee'}", href="#", @click.stop.prevent="updateExportContent('podigee')")
                                i.bi.bi-filetype-json
                                |
                                | Podigee
                        li.nav-item(x-show="/podcastpage|podigeetext|spofitfya|spotifyb|shownotes|transistorfm/.test(selectedFormats.join(','))")
                            a.nav-link(:class="{active : exportSettings.type === 'misctext'}", href="#", @click.stop.prevent="updateExportContent('misctext')")
                                i.bi.bi-filetype-txt
                                |
                                | Misc Text
                    div.row.flex-grow-1
                        div.col-8.d-flex.flex-column
                            textarea.flex-grow-1.overflow-visible.form-control(:value="exportContent", readonly, x-ref="outputTextarea")
                            div.mt-2.d-flex.justify-content-evenly
                                button.btn.btn-outline-primary(@click="download")
                                    i.bi.bi-download
                                    |
                                    | Download
                                button.btn.btn-outline-primary(
                                    @click="downloadZip"
                                    x-show="exportSettings.type === 'chaptersjson' && exportSettings.hasImages"
                                )
                                    i.bi.bi-file-zip
                                    |
                                    | Zip w/ Images
                                button.btn.btn-outline-primary(@click="copyToClipboard")
                                    i.bi.bi-clipboard
                                    |
                                    | Copy to Clipboard
                        div.col-4
                            div.mb-2.form-check.form-switch(x-show="exportSettings.supportsPretty")
                                input#exportPretty.form-check-input(@change="updateExportContent()",type="checkbox", x-model="exportSettings.pretty")
                                label.form-check-label(for="exportPretty") pretty print
                            template(x-if="exportSettings.type === 'chaptersjson'")
                                div
                                    div.form-check.form-switch.mb-2
                                        input.form-check-input#writeToc(@change="updateExportContent()",type="checkbox", x-model="exportSettings.writeRedundantToc")
                                        label.form-check-label(for="writeToc") write all TOC attributes
                                    div.form-check.form-switch.mb-2
                                        input.form-check-input#writeEndTimes(@change="updateExportContent()",type="checkbox", x-model="exportSettings.writeEndTimes")
                                        label.form-check-label(for="writeEndTimes") write endTime Attributes
                                    div(x-show="exportSettings.canUseImagePrefix")
                                        label.form-label.small(for="imagePrefix") image URI prefix
                                        input.form-control#imagePrefix(@input="updateExportContent()", x-model="exportSettings.imagePrefix")
                            template(x-if="/^(mkvmerge|vorbis)/.test(exportSettings.type)")
                                div.btn-group.btn-group-sm(role="group")
                                    input#formatMKVMergeXML.btn-check(type="radio",name="mkvformat",value="mkvmergexml", x-model="exportSettings.type", @change="updateExportContent()")
                                    label.btn.btn-outline-primary(for="formatMKVMergeXML") XML
                                    input#formatMKVMergeSimple.btn-check(type="radio",name="mkvformat",value="mkvmergesimple", x-model="exportSettings.type", @change="updateExportContent()")
                                    label.btn.btn-outline-primary(for="formatMKVMergeSimple") simple aka Nero
                                    input#formatVorbisComment.btn-check(type="radio",name="mkvformat",value="vorbiscomment", x-model="exportSettings.type", @change="updateExportContent()")
                                    label.btn.btn-outline-primary(for="formatVorbisComment") Vorbis Comment
                            template(x-if="exportSettings.type === 'misctext'")
                                div
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextSpotifyA(@change="updateExportContent()", value="spotifya" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextSpotifyA") spotify(A)
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextSpotifyB(@change="updateExportContent()", value="spotifyb" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextSpotifyB") spotify(B)
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextTransistorFM(@change="updateExportContent()", value="transistorfm" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextTransistorFM") TransistorFM
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextPodigeeText(@change="updateExportContent()", value="podigeetext" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextPodigeeText") PodigeeText
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextPodcastPage(@change="updateExportContent()", value="podcastpage" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextPodcastPage") PodcastPage
                                    div.form-check.mb-2
                                        input.form-check-input#miscTextShownotes(@change="updateExportContent()", value="shownotes" type="radio", x-model="exportSettings.miscTextType")
                                        label.form-check-label(for="miscTextShownotes") "Shownotes"

                                
                            template(x-if="/^(psc|podlove)/.test(exportSettings.type)")
                                div.btn-group.btn-group-sm(role="group")
                                    input#podloveSimpleChapters.btn-check(type="radio",name="podloveformat",value="psc", x-model="exportSettings.type", @change="updateExportContent()")
                                    label.btn.btn-outline-primary(for="podloveSimpleChapters") Podlove Simple Chapters
                                    input#podloveJson.btn-check(type="radio",name="podloveformat",value="podlovejson", x-model="exportSettings.type", @change="updateExportContent()")
                                    label.btn.btn-outline-primary(for="podloveJson") podlove json
                            template(x-if="exportSettings.type === 'pyscenedetect'")
                                div
                                    div.input-group.mb-2
                                        span.input-group-text Framerate
                                        input#psdFramerate.form-control.form-control-sm(type="text", min=1, max=240, step=0.001, x-model.number="exportSettings.psdFramerate", @input="updateExportContent()")
                                    div.form-check.form-switch.mb-2
                                        input.form-check-input#psdOmitTimecodes(@change="updateExportContent()",type="checkbox", x-model="exportSettings.psdOmitTimecodes")
                                        label.form-check-label(for="psdOmitTimecodes") omit <kbd>Timecode List</kbd>
                            template(x-if="exportSettings.type === 'applechapters'")
                                div
                                    div.form-check.form-switch.mb-2
                                        input.form-check-input#psdOmitTimecodes(@change="updateExportContent()",type="checkbox", x-model="exportSettings.acUseTextAttr")
                                        label.form-check-label(for="psdOmitTimecodes") use <kbd>text</kbd>-attr
